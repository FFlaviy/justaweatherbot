import os
import requests
import sqlite3
import time
import threading
from dotenv import load_dotenv
import telebot
from telebot import types
import schedule

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv('/home/admin/tokens.env')

BOT_TOKEN = os.getenv('BOT_TOKEN')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
if BOT_TOKEN is None or WEATHER_API_KEY is None:
    raise ValueError("BOT_TOKEN or WEATHER_API_KEY is not set in the environment variables.")

bot = telebot.TeleBot(BOT_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def create_db():
    conn = sqlite3.connect('weather_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            chat_id INTEGER PRIMARY KEY,
            city TEXT,
            interval INTEGER
        )
    ''')
    conn.commit()
    conn.close()

create_db()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_bot(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç! üå§Ô∏è\n"
                                      "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. "
                                      "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.")

# –ö–æ–º–∞–Ω–¥–∞ /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@bot.message_handler(commands=['stop'])
def stop_command(message):
    chat_id = message.chat.id
    schedule.clear(chat_id)
    bot.send_message(chat_id, "üö´ –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
@bot.message_handler(func=lambda message: True)
def handle_city_input(message):
    city = message.text.strip()
    chat_id = message.chat.id
    save_city(chat_id, city)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    send_weather_forecast(chat_id, city)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏
def send_weather_forecast(chat_id, city):
    try:
        response = requests.get(f'http://api.weatherapi.com/v1/current.json?key={WEATHER_API_KEY}&q={city}')
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ WeatherAPI. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return

    if response.status_code == 200:
        data = response.json()
        description = data['current']['condition']['text']  # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã
        temperature = data['current']['temp_c']  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è
        humidity = data['current']['humidity']  # –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        weather_message = (f"üåÜ –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n"
                           f"‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                           f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
                           f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n\n"
                           "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã?")
        bot.send_message(chat_id, weather_message, reply_markup=get_frequency_keyboard())
    else:
        bot.send_message(chat_id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
def get_frequency_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    minute_1_button = types.InlineKeyboardButton("–ö–∞–∂–¥—ã–µ 1 –º–∏–Ω—É—Ç—É", callback_data='1')  # 1 –º–∏–Ω—É—Ç–∞
    hour_1_button = types.InlineKeyboardButton("–ö–∞–∂–¥—ã–π —á–∞—Å", callback_data='60')  # 1 —á–∞—Å (60 –º–∏–Ω—É—Ç)
    hour_3_button = types.InlineKeyboardButton("–ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞", callback_data='180')  # 3 —á–∞—Å–∞ (180 –º–∏–Ω—É—Ç)
    hour_6_button = types.InlineKeyboardButton("–ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤", callback_data='360')  # 6 —á–∞—Å–æ–≤ (360 –º–∏–Ω—É—Ç)

    keyboard.add(minute_1_button, hour_1_button, hour_3_button, hour_6_button)
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_city(chat_id, city):
    conn = sqlite3.connect('weather_bot.db')
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO users (chat_id, city, interval) VALUES (?, ?, ?)", (chat_id, city, None))
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
@bot.callback_query_handler(func=lambda call: call.data.isdigit())
def handle_frequency_selection(call):
    chat_id = call.message.chat.id
    interval_minutes = int(call.data)

    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('weather_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT city FROM users WHERE chat_id=?", (chat_id,))
    result = cursor.fetchone()

    if result:
        city = result[0]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("UPDATE users SET interval=? WHERE chat_id=?", (interval_minutes, chat_id))
        conn.commit()
        bot.send_message(chat_id, f"‚úÖ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ {city} –∫–∞–∂–¥—ã–µ {interval_minutes} –º–∏–Ω—É—Ç(—ã)! ‚è∞")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        schedule_updates(chat_id, city, interval_minutes)
    else:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
def schedule_updates(chat_id, city, interval_minutes):
    schedule.clear(chat_id)
    schedule.every(interval_minutes).minutes.do(send_periodic_weather, chat_id, city).tag(chat_id)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
def send_periodic_weather(chat_id, city):
    try:
        response = requests.get(f'http://api.weatherapi.com/v1/current.json?key={WEATHER_API_KEY}&q={city}', timeout=10)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return

    if response.status_code == 200:
        data = response.json()
        description = data['current']['condition']['text']
        temperature = data['current']['temp_c']
        humidity = data['current']['humidity']
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
        stop_keyboard = types.InlineKeyboardMarkup()
        stop_button = types.InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data=f'stop_{chat_id}')
        stop_keyboard.add(stop_button)
        
        weather_message = (f"üåÜ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                           f"‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                           f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
                           f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%")
        bot.send_message(chat_id, weather_message, reply_markup=stop_keyboard)
    else:
        print(f"–û—à–∏–±–∫–∞ API: {response.status_code}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
@bot.callback_query_handler(func=lambda call: call.data.startswith("stop_"))
def stop_updates(call):
    chat_id = int(call.data.split("_")[1])
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    schedule.clear(chat_id)
    bot.send_message(chat_id, "üö´ –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
threading.Thread(target=run_scheduler, daemon=True).start()
bot.infinity_polling()
